// ================== 配置部分 ==================
const NOTION_TOKEN = 'ntn_b32235170706VL1CKuyYng7TG47wZPdkMHtfbEn3IBgegv';
const DATABASE_ID = '1a10c022f78e80cd9019d7c146ddf306';
const TG_TOKEN = '8029665644:AAEwB9oi-NCAObluhEdXSJP1ToptV50_r_k';
const VERSION = '5.0';

// 腾讯云 COS 配置（请替换为你的信息）
const COS_BUCKET_NAME = 'png-1253420449';
const COS_REGION = 'ap-chongqing';
// 腾讯云 COS 配置（请替换为你的信息）
const COS_SECRET_ID = 'xxx';
// 腾讯云 COS 配置（请替换为你的信息）
const COS_SECRET_KEY = 'xxx';
const COS_DOMAIN = 'https://png-1253420449.cos.ap-chongqing.myqcloud.com';

// ================== 工具函数 ==================
// 用于转义 Markdown 字符
function escapeMD(text) {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

// 自动生成标签（包括自定义和自动匹配标签）
function generateTags(content) {
  const customTags = [...new Set(content.match(/#(\p{L}+)/gu) || [])].map(t => t.slice(1));
  const AUTO_TAGS = {
    '工作': ['会议', '项目', '汇报', '客户'],
    '学习': ['笔记', '课程', '论文', '阅读'],
    '生活': ['购物', '食谱', '健康', '旅行']
  };
  const autoTags = Object.entries(AUTO_TAGS)
    .filter(([_, keywords]) => keywords.some(kw => content.includes(kw)))
    .map(([tag]) => tag);
  return [...new Set([...customTags, ...autoTags])];
}

// ================== Notion 交互 ==================
function getNotionHeaders() {
  return {
    'Authorization': `Bearer ${NOTION_TOKEN}`,
    'Content-Type': 'application/json',
    'Notion-Version': '2022-06-28'
  };
}

async function saveToNotion({ title, content, tags, children, userId }) {
  const body = {
    parent: { database_id: DATABASE_ID },
    icon: { type: 'emoji', emoji: '📘' },
    properties: {
      '标题': { title: [{ text: { content: title.substring(0, 200) } }] },
      '内容': { rich_text: [{ text: { content: content.substring(0, 2000) } }] },
      '标签': { multi_select: tags.slice(0, 5).map(tag => ({ name: tag })) },
      '日期': { date: { start: new Date().toISOString() } },
      '用户ID': { rich_text: [{ text: { content: userId.toString() } }] }
    },
    children: [
      ...(children || []),
      {
        object: 'block',
        type: 'paragraph',
        paragraph: { rich_text: [{ text: { content: content + '\n\n' } }] }
      }
    ]
  };

  const response = await fetch('https://api.notion.com/v1/pages', {
    method: 'POST',
    headers: getNotionHeaders(),
    body: JSON.stringify(body)
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Notion API错误: ${error.message}`);
  }
  return await response.json();
}

// ================== 腾讯云 COS 签名及上传 ==================
async function getAuthorization({ SecretId, SecretKey, Method, Key, Bucket, Region }) {
  const now = Math.floor(Date.now() / 1000);
  const exp = now + 3600; // 有效期1小时
  const signTime = `${now};${exp}`;
  const keyTime = signTime;
  const signKey = await hmacSha1(SecretKey, keyTime);
  const httpString = `${Method.toLowerCase()}\n/${Key}\n\n\n`;
  const stringToSign = `sha1\n${signTime}\n${await sha1(httpString)}\n`;
  const signature = await hmacSha1(signKey, stringToSign);
  return `q-sign-algorithm=sha1&q-ak=${SecretId}&q-sign-time=${signTime}&q-key-time=${keyTime}&q-header-list=&q-url-param-list=&q-signature=${signature}`;
}

async function hmacSha1(key, msg) {
  const cryptoKey = await crypto.subtle.importKey(
    'raw',
    new TextEncoder().encode(key),
    { name: 'HMAC', hash: 'SHA-1' },
    false,
    ['sign']
  );
  const signature = await crypto.subtle.sign(
    'HMAC',
    cryptoKey,
    new TextEncoder().encode(msg)
  );
  return Array.from(new Uint8Array(signature))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');
}

async function sha1(msg) {
  const msgBuffer = new TextEncoder().encode(msg);
  const hashBuffer = await crypto.subtle.digest('SHA-1', msgBuffer);
  return Array.from(new Uint8Array(hashBuffer))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');
}

// 上传文件到 COS，并返回文件的外链 URL
async function uploadToCos(fileUrl, contentType) {
  // 下载文件数据
  const response = await fetch(fileUrl);
  const fileBuffer = await response.arrayBuffer();
  const timestamp = Date.now();
  // 根据 contentType 决定文件扩展名
  const ext = contentType === 'image/jpeg' ? 'jpg' : (contentType === 'video/mp4' ? 'mp4' : 'dat');
  const fileName = `telegram-file-${timestamp}.${ext}`;
  const authorization = await getAuthorization({
    SecretId: COS_SECRET_ID,
    SecretKey: COS_SECRET_KEY,
    Method: 'PUT',
    Key: fileName,
    Bucket: COS_BUCKET_NAME,
    Region: COS_REGION,
  });
  const cosUrl = `${COS_DOMAIN}/${fileName}`;
  const cosUploadUrl = `https://${COS_BUCKET_NAME}.cos.${COS_REGION}.myqcloud.com/${fileName}`;
  
  const uploadResp = await fetch(cosUploadUrl, {
    method: 'PUT',
    headers: {
      'Authorization': authorization,
      'Content-Type': contentType,
    },
    body: fileBuffer,
  });
  
  if (!uploadResp.ok) {
    throw new Error(`COS 上传失败，状态码：${uploadResp.status}`);
  }
  
  return cosUrl;
}

// ================== Telegram 交互 ==================
async function sendMessage(chatId, text, replyTo = null, markdown = true) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TG_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: markdown ? text : escapeMD(text),
        reply_to_message_id: replyTo,
        parse_mode: markdown ? 'MarkdownV2' : undefined,
        disable_web_page_preview: true
      })
    });
    const responseData = await response.json();
    console.log(`sendMessage response: ${JSON.stringify(responseData)}`);
  } catch (error) {
    console.error('发送消息失败:', error);
  }
}

// ================== 文件 URL 获取 ==================
async function getTelegramFileUrl(fileId) {
  const res = await fetch(`https://api.telegram.org/bot${TG_TOKEN}/getFile?file_id=${fileId}`);
  const data = await res.json();
  if (!data.ok) throw new Error('获取文件信息失败');
  return `https://api.telegram.org/file/bot${TG_TOKEN}/${data.result.file_path}`;
}

// ================== 文件图标（根据文件类型） ==================
function getIcon(type) {
  const fileIcons = {
    pdf: '📄',
    ppt: '📊',
    pptx: '📊',
    doc: '📑',
    docx: '📑',
    xls: '📈',
    xlsx: '📈',
    zip: '📦',
    rar: '📦',
    md: '📝',
    default: '📎'
  };
  return fileIcons[type] || fileIcons.default;
}

// ================== Notion 搜索、统计等功能（可选） ==================
// 此处省略统计及搜索功能代码，你可以根据需要添加

// ================== 消息处理 ==================
async function processMessage(message) {
  if (!message.text && !message.caption && !message.photo && !message.video && !message.document) {
    console.log('忽略无效消息类型');
    return;
  }

  try {
    // 如果消息为命令文本
    if (message.text && message.text.startsWith('/')) {
      await handleCommand(message);
      return;
    }

    // 处理文件、图片、视频消息
    if (message.document || message.photo || message.video) {
      let fileUrl, blockType, fileName, contentType;
      const fileInfo = message.document || (message.photo && message.photo[message.photo.length - 1]) || message.video;
      if (message.document) {
        fileUrl = await getTelegramFileUrl(fileInfo.file_id);
        blockType = 'file';
        fileName = escapeMD(fileInfo.file_name || '文件');
        contentType = 'application/octet-stream';
      } else if (message.photo) {
        fileUrl = await getTelegramFileUrl(fileInfo.file_id);
        blockType = 'image';
        fileName = '图片';
        contentType = 'image/jpeg';
      } else if (message.video) {
        fileUrl = await getTelegramFileUrl(fileInfo.file_id);
        blockType = 'video';
        fileName = '视频';
        contentType = 'video/mp4';
      }

      // 下载文件并上传到 COS
      const cosFileUrl = await uploadToCos(fileUrl, contentType);
      // 处理文字说明
      const caption = message.caption || '';
      const cleanContent = caption.replace(/#\p{L}+/gu, '').trim();
      const tags = generateTags(caption);

      // 将文件链接作为子块添加到 Notion 页面中
      const childrenBlock = {
        object: 'block',
        type: blockType === 'file' ? 'file' : blockType,
        [blockType]: blockType === 'file'
          ? { external: { url: cosFileUrl }, caption: [{ text: { content: fileName } }] }
          : { external: { url: cosFileUrl } }
      };

      await saveToNotion({
        title: `${getIcon(blockType)} ${message.from.first_name}的${fileName}`,
        content: cleanContent || '无文字说明',
        tags: tags,
        userId: message.from.id,
        children: [childrenBlock]
      });

      await sendMessage(
        message.chat.id,
        `✅ ${fileName} 已成功保存到 Notion\nCOS 链接: ${cosFileUrl}${tags.length ? '\n标签：' + tags.join(' ') : ''}`,
        message.message_id,
        false
      );
      return;
    }

    // 处理纯文本消息
    if (message.text) {
      const content = message.text;
      const tags = generateTags(content);
      await saveToNotion({
        title: `📝 ${message.from.first_name}的笔记`,
        content: content.replace(/#\p{L}+/gu, '').trim(),
        tags: tags,
        userId: message.from.id
      });
      await sendMessage(
        message.chat.id,
        `✅ 文本已保存${tags.length ? '\n标签：' + tags.join(' ') : ''}`,
        message.message_id
      );
      return;
    }
  } catch (error) {
    console.error('处理消息失败:', error);
    await sendMessage(
      message.chat.id,
      `❌ 保存失败：${error.message}`,
      message.message_id,
      false
    );
  }
}

// ================== 命令处理器 ==================
async function handleCommand(message) {
  const [command, ...args] = message.text.split(' ');
  const query = args.join(' ');
  try {
    switch (command.toLowerCase()) {
      case '/start':
        await sendMessage(
          message.chat.id,
          `📚 智能知识库助手\n欢迎使用！版本：${VERSION}\n直接发送内容即可保存，支持图片/文件/视频`,
          message.message_id
        );
        break;
      case '/help':
        await sendMessage(
          message.chat.id,
          `帮助中心\n
/start - 开始使用
/help - 帮助信息
/search - 搜索（可选）
/status - 账户状态`,
          message.message_id
        );
        break;
      default:
        await sendMessage(
          message.chat.id,
          '❌ 未知命令，可用命令：\n/start\n/help',
          message.message_id,
          false
        );
    }
  } catch (error) {
    console.error('命令处理错误:', error);
    await sendMessage(
      message.chat.id,
      `❌ 操作失败：${escapeMD(error.message)}`,
      message.message_id,
      false
    );
  }
}

// ================== Worker 入口 ==================
async function handleRequest(request) {
  try {
    const url = new URL(request.url);
    // Telegram Webhook 使用 POST 请求，路径设置为 /<TG_TOKEN>
    if (request.method === 'POST' && url.pathname === `/${TG_TOKEN}`) {
      const update = await request.json();
      if (update.message) {
        await processMessage(update.message);
      }
      return new Response('OK');
    }
    return new Response('Not Found', { status: 404 });
  } catch (error) {
    console.error('全局错误:', error);
    return new Response(error.stack, { status: 500 });
  }
}

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});
